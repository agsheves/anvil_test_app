components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/livekit-client/dist/livekit-client.umd.min.js\"></script>\n  </head>\n  <body class=\"bg-gray-100 p-5 font-sans\">\n    <div class=\"max-w-3xl mx-auto bg-white p-5 rounded-lg shadow-md\">\n      <div class=\"flex flex-wrap gap-2.5 mb-5\">\n        <input id=\"avatarID\" anvil-name=\"avatar-input\" type=\"text\" placeholder=\"Avatar ID\" value=\"Annie_expressive_public\" \n          class=\"flex-1 min-w-[200px] p-2 border border-gray-300 rounded-md\" />\n        <input id=\"voiceID\" anvil-name=\"voice-input\" type=\"text\" placeholder=\"Voice ID\" value=\"7c34f2f432d94cd9b3ace5bd209f70b0\"\n          class=\"flex-1 min-w-[200px] p-2 border border-gray-300 rounded-md\" />\n        <button id=\"startBtn\" anvil-name=\"start-btn\" class=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\">\n          Start\n        </button>\n        <button id=\"closeBtn\" anvil-name=\"close-btn\" class=\"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors\">\n          Close\n        </button>\n      </div>\n\n      <div class=\"flex flex-wrap gap-2.5 mb-5\">\n        <input id=\"taskInput\" anvil-name=\"task-input\" type=\"text\" placeholder=\"Enter text or use voice\" \n          class=\"flex-1 min-w-[200px] p-2 border border-gray-300 rounded-md\" />\n        <button id=\"voiceBtn\" anvil-name=\"voice-btn\" class=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\">\n          ðŸŽ¤ Voice\n        </button>\n        <button id=\"talkBtn\" anvil-name=\"send-btn\" class=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors\">\n          Send\n        </button>\n      </div>\n\n      <video id=\"mediaElement\" anvil-name=\"video-element\" class=\"w-full max-h-[400px] border rounded-lg my-5\" autoplay></video>\n      <div id=\"status\" anvil-name=\"status-div\" class=\"p-2.5 bg-gray-50 border border-gray-300 rounded-md h-[100px] overflow-y-auto font-mono text-sm\"></div>\n    </div>\n\n    <script>\n      let sessionInfo = null;\n      let room = null;\n      let mediaStream = null;\n      let sessionToken = null;\n      let recognition = null;\n      let isListening = false;\n\n      const statusElement = document.getElementById(\"status\");\n      const mediaElement = document.getElementById(\"mediaElement\");\n      const avatarID = document.getElementById(\"avatarID\");\n      const voiceID = document.getElementById(\"voiceID\");\n      const taskInput = document.getElementById(\"taskInput\");\n\n      function updateStatus(message) {\n        const timestamp = new Date().toLocaleTimeString();\n        statusElement.innerHTML += `[${timestamp}] ${message}<br>`;\n        statusElement.scrollTop = statusElement.scrollHeight;\n      }\n\n      // Speech recognition setup\n      if ('webkitSpeechRecognition' in window) {\n        recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        recognition.lang = 'en-US';\n\n        recognition.onresult = function(event) {\n          const transcript = event.results[0][0].transcript;\n          taskInput.value = transcript;\n          updateStatus(`Voice: ${transcript}`);\n          isListening = false;\n          document.getElementById(\"voiceBtn\").textContent = \"ðŸŽ¤ Voice\";\n        };\n\n        recognition.onend = function() {\n          isListening = false;\n          document.getElementById(\"voiceBtn\").textContent = \"ðŸŽ¤ Voice\";\n        };\n      }\n\n      // Functions called from Python\n      window.avatarFunctions = {\n        setupLiveKitRoom: function(sessionInfoData, sessionTokenData) {\n          sessionInfo = sessionInfoData;\n          sessionToken = sessionTokenData;\n          \n          room = new LivekitClient.Room({\n            adaptiveStream: true,\n            dynacast: true,\n            videoCaptureDefaults: { resolution: LivekitClient.VideoPresets.h720.resolution },\n          });\n\n          mediaStream = new MediaStream();\n          room.on(LivekitClient.RoomEvent.TrackSubscribed, (track) => {\n            if (track.kind === \"video\" || track.kind === \"audio\") {\n              mediaStream.addTrack(track.mediaStreamTrack);\n              if (mediaStream.getVideoTracks().length > 0 && mediaStream.getAudioTracks().length > 0) {\n                mediaElement.srcObject = mediaStream;\n                updateStatus(\"Media stream ready\");\n              }\n            }\n          });\n\n          room.prepareConnection(sessionInfo.url, sessionInfo.access_token);\n          updateStatus(\"Session created successfully\");\n        },\n\n        connectToRoom: async function() {\n          await room.connect(sessionInfo.url, sessionInfo.access_token);\n          document.querySelector(\"#startBtn\").disabled = true;\n          updateStatus(\"Streaming started\");\n        },\n\n        closeSession: async function() {\n          if (room) room.disconnect();\n          mediaElement.srcObject = null;\n          sessionInfo = null;\n          sessionToken = null;\n          document.querySelector(\"#startBtn\").disabled = false;\n          updateStatus(\"Session closed\");\n        },\n\n        showAIResponse: function(response) {\n          updateStatus(`AI: ${response}`);\n        },\n\n        showError: function(errorMessage) {\n          updateStatus(`ERROR: ${errorMessage}`);\n        }\n      };\n\n      // Event listeners for voice and other UI elements\n      document.querySelector(\"#voiceBtn\").addEventListener(\"click\", () => {\n        if (!recognition) return;\n        if (isListening) {\n          recognition.stop();\n        } else {\n          recognition.start();\n          isListening = true;\n          document.getElementById(\"voiceBtn\").textContent = \"ðŸ”´ Stop\";\n        }\n      });\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
custom_component: true
is_package: true
