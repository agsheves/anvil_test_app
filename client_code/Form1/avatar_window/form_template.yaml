components: []
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <title>Basic HeyGen Avatar</title>
          <script src="https://cdn.jsdelivr.net/npm/livekit-client/dist/livekit-client.umd.min.js"></script>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .container { max-width: 800px; margin: 0 auto; }
            .controls { margin-bottom: 20px; }
            input, button { padding: 10px; margin: 5px; }
            #avatarVideo { width: 100%; max-width: 600px; border: 1px solid #ccc; }
            #status { background: #f5f5f5; padding: 10px; margin: 10px 0; height: 100px; overflow-y: auto; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>Decis CoPilot</h1>

            <div class="controls">
              <input id="avatarId" type="text" placeholder="Avatar ID" value="Wayne_20240711">
              <button id="startBtn">Start Avatar</button>
              <button id="stopBtn">Stop Avatar</button>
            </div>

            <div class="controls">
              <input id="textInput" type="text" placeholder="Text for avatar to speak">
              <button id="sendTextBtn">Send Text</button>
            </div>

            <video id="avatarVideo" autoplay muted></video>

            <div id="status">Ready...</div>
          </div>

          <script>
            // Configuration - replace with your API key
            const API_KEY = "YOUR_API_KEY_HERE";
            const SERVER_URL = "https://api.heygen.com";

            // Global state
            let sessionInfo = null;
            let sessionToken = null;
            let room = null;
            let mediaStream = null;

            // DOM elements
            const avatarVideo = document.getElementById('avatarVideo');
            const statusDiv = document.getElementById('status');
            const avatarIdInput = document.getElementById('avatarId');
            const textInput = document.getElementById('textInput');

            // Utility function to log status
            function logStatus(message) {
              console.log(message);
              statusDiv.innerHTML += `[${new Date().toLocaleTimeString()}] ${message}<br>`;
              statusDiv.scrollTop = statusDiv.scrollHeight;
            }

            // Step 1: Get session token
            async function getSessionToken() {
              logStatus("Getting session token...");

              const response = await fetch(`${SERVER_URL}/v1/streaming.create_token`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "X-Api-Key": API_KEY,
                },
              });

              const data = await response.json();
              sessionToken = data.data.token;
              logStatus("Session token obtained");
            }

            // Step 2: Create avatar session
            async function createSession() {
              if (!sessionToken) {
                await getSessionToken();
              }

              logStatus("Creating avatar session...");

              const response = await fetch(`${SERVER_URL}/v1/streaming.new`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${sessionToken}`,
                },
                body: JSON.stringify({
                  version: "v2",
                  avatar_id: avatarIdInput.value
                })
              });

              const data = await response.json();
              sessionInfo = data.data;
              logStatus("Avatar session created");

              // Set up LiveKit room
              await setupLiveKitRoom();

              // Start the session
              await startSession();
            }

            // Step 3: Setup LiveKit room for video
            async function setupLiveKitRoom() {
              logStatus("Setting up video connection...");

              room = new LivekitClient.Room();

              // Handle video/audio tracks
              room.on(LivekitClient.RoomEvent.TrackSubscribed, (track) => {
                if (track.kind === "video") {
                  if (!mediaStream) {
                    mediaStream = new MediaStream();
                  }
                  mediaStream.addTrack(track.mediaStreamTrack);
                  avatarVideo.srcObject = mediaStream;
                  logStatus("Avatar video connected");
                }
              });

              // Connect to LiveKit room
              await room.connect(sessionInfo.url, sessionInfo.access_token);
              logStatus("Connected to avatar");
            }

            // Step 4: Start the streaming session
            async function startSession() {
              logStatus("Starting avatar...");

              await fetch(`${SERVER_URL}/v1/streaming.start`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${sessionToken}`,
                },
                body: JSON.stringify({
                  session_id: sessionInfo.session_id,
                })
              });

              logStatus("Avatar started and ready!");
            }

            // Step 5: Send text to avatar
            async function sendTextToAvatar(text) {
              if (!sessionInfo) {
                logStatus("No active session - start avatar first");
                return;
              }

              logStatus(`Sending text: "${text}"`);

              await fetch(`${SERVER_URL}/v1/streaming.task`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${sessionToken}`,
                },
                body: JSON.stringify({
                  session_id: sessionInfo.session_id,
                  text: text,
                  task_type: "talk"
                })
              });

              logStatus("Text sent to avatar");
            }

            // Step 6: Stop session
            async function stopSession() {
              if (!sessionInfo) {
                logStatus("No active session");
                return;
              }

              logStatus("Stopping avatar...");

              await fetch(`${SERVER_URL}/v1/streaming.stop`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${sessionToken}`,
                },
                body: JSON.stringify({
                  session_id: sessionInfo.session_id,
                })
              });

              // Cleanup
              if (room) {
                room.disconnect();
              }
              avatarVideo.srcObject = null;
              sessionInfo = null;
              sessionToken = null;
              room = null;
              mediaStream = null;

              logStatus("Avatar stopped");
            }

            // Event listeners
            document.getElementById('startBtn').addEventListener('click', async () => {
              try {
                await createSession();
              } catch (error) {
                logStatus(`Error: ${error.message}`);
              }
            });

            document.getElementById('stopBtn').addEventListener('click', async () => {
              try {
                await stopSession();
              } catch (error) {
                logStatus(`Error: ${error.message}`);
              }
            });

            document.getElementById('sendTextBtn').addEventListener('click', async () => {
              const text = textInput.value.trim();
              if (text) {
                try {
                  await sendTextToAvatar(text);
                  textInput.value = '';
                } catch (error) {
                  logStatus(`Error: ${error.message}`);
                }
              }
            });

            // Allow Enter key to send text
            textInput.addEventListener('keypress', (e) => {
              if (e.key === 'Enter') {
                document.getElementById('sendTextBtn').click();
              }
            });
          </script>
        </body>
      </html>
  type: HtmlTemplate
custom_component: true
is_package: true
